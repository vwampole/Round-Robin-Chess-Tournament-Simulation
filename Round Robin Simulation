# Imports necessary packages
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import math
from random import random
from sklearn import linear_model
pd.options.mode.chained_assignment = None


# Player name and rating inputs (default is the 2018 Candidates Tournament).
playerRating = [2763, 2794, 2769, 2809, 2767, 2784, 2799, 2800]
playerName = ['Sergey Karjakin', 'Levon Aronian', 'Ding Liren', 'Shakhriyar Mamedyarov', 'Alexander Grischuk', 'Fabiano Caruana', 'Wesley So' ,'Vladimir Kramnik']

# Creates the player data frame.
numPlayers = len(playerRating)
playerNumber = [i for i in range(1, numPlayers + 1)]
data = {'playerRating' : playerRating, 'playerNumber' : playerNumber, 'playerName' : playerName}
df = pd.DataFrame(data)
df.sort_values('playerRating', ascending = False, inplace = True)

# Conducts the simulation of a single tournament. Every player plays each other player k times.
def Tournament(k):
    # Initalizes each player's score to be 0.
    df['score'] = 0.0
   
    for k in range(0, k):
        j = 0
        while j + 1 < numPlayers:
            # Simulates one round of the tournament.
            for i in range(j + 1, numPlayers):
                # Pairs the players
                playerOne = df.playerNumber[j]
                playerTwo = df.playerNumber[i]
                playerOneRating = df['playerRating'][playerOne - 1]
                playerTwoRating = df['playerRating'][playerTwo - 1]

                # Simulates the results
                matchupAverageRating = (playerOneRating + playerTwoRating) / 2
                matchupRatingDif = abs(playerOneRating - playerTwoRating)
                playerOneScore = 1 / (1 + pow(10, (playerTwoRating - playerOneRating) / 400))
                drawPercent = .2 + max((-matchupRatingDif / 32.49 + math.exp((matchupAverageRating - 2254.7) / 208.49) + 23.87) / 100, min(playerOneScore, 1 - playerOneScore) / 10)
                playerOneWinPercent = playerOneScore - drawPercent / 2
                randVal = random() 
                
                # Updates the score for each possible game result:
            
                # Player one wins
                if randVal <= playerOneWinPercent:
                    df.score[playerOne - 1] += 1
                # Draw
                elif randVal <= playerOneWinPercent + drawPercent:
                    df.score[playerOne - 1] += .5
                    df.score[playerTwo - 1] += .5
                # Player two wins
                else:
                    df.score[playerTwo - 1] += 1  
            j += 1
    
    df.reset_index(inplace = True, drop = True)

# Simulates the tournament n times and prints the results.
def Simulation(n , k):
    i = 0
    resultsdf = pd.DataFrame(data)
    resultsdf['numFirst'] = 0
    resultsdf['numSecond'] = 0
    resultsdf['numThird'] = 0
    resultsdf['numFourth'] = 0
    
    while i < n:
        Tournament(k)
        
        # Sorts the results of the tournament
        df.sort_values('score', ascending = False, inplace = True)
       
        # Records the results of the tournament
        first = df.playerNumber[0]
        second = df.playerNumber[1]
        third = df.playerNumber[2]
        fourth = df.playerNumber[3]
        
        resultsdf.numFirst[first - 1] += 1
        resultsdf.numSecond[second - 1] += 1
        resultsdf.numThird[third - 1] += 1
        resultsdf.numFourth[fourth - 1] += 1

        i += 1
    
    resultsdf['firstFreq'] = resultsdf['numFirst'] / n
    resultsdf['secondFreq'] = resultsdf['numSecond'] / n
    resultsdf['thirdFreq'] = resultsdf['numThird'] / n
    resultsdf['fourthFreq'] = resultsdf['numFourth'] / n
    
    resultsdf.sort_values('numFirst', ascending = False, inplace = True)
    resultsdf.reset_index(inplace = True, drop = True)
    
    print(resultsdf)
    
Simulation(1000, 2)
