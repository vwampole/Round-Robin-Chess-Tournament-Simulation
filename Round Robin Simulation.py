#!/usr/bin/env python
# coding: utf-8

# In[2]:


get_ipython().run_cell_magic('time', '', '# Imports necessary packages\nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport math\nfrom random import random\nfrom sklearn import linear_model\npd.options.mode.chained_assignment = None')


# In[13]:


get_ipython().run_cell_magic('time', '', "# Player name and rating inputs (default is the 2018 Candidates Tournament).\nplayerRating = [2763, 2794, 2769, 2809, 2767, 2784, 2799, 2800]\nplayerName = ['Sergey Karjakin', 'Levon Aronian', 'Ding Liren', 'Shakhriyar Mamedyarov', 'Alexander Grischuk', 'Fabiano Caruana', 'Wesley So' ,'Vladimir Kramnik']\n\n# Creates the player data frame.\nnumPlayers = len(playerRating)\nplayerNumber = [i for i in range(1, numPlayers + 1)]\ndata = {'playerRating' : playerRating, 'playerNumber' : playerNumber, 'playerName' : playerName}\ndf = pd.DataFrame(data)\ndf.sort_values('playerRating', ascending = False, inplace = True)\n\n# Conducts the simulation of a single tournament. Every player plays each other player k times.\ndef Tournament(k):\n    # Initalizes each player's score to be 0.\n    df['score'] = 0.0\n   \n    for k in range(0, k):\n        j = 0\n        while j + 1 < numPlayers:\n            # Simulates one round of the tournament.\n            for i in range(j + 1, numPlayers):\n                # Pairs the players\n                playerOne = df.playerNumber[j]\n                playerTwo = df.playerNumber[i]\n                playerOneRating = df['playerRating'][playerOne - 1]\n                playerTwoRating = df['playerRating'][playerTwo - 1]\n\n                # Simulates the results\n                matchupAverageRating = (playerOneRating + playerTwoRating) / 2\n                matchupRatingDif = abs(playerOneRating - playerTwoRating)\n                playerOneScore = 1 / (1 + pow(10, (playerTwoRating - playerOneRating) / 400))\n                drawPercent = .2 + max((-matchupRatingDif / 32.49 + math.exp((matchupAverageRating - 2254.7) / 208.49) + 23.87) / 100, min(playerOneScore, 1 - playerOneScore) / 10)\n                playerOneWinPercent = playerOneScore - drawPercent / 2\n                randVal = random() \n                \n                # Updates the score for each possible game result:\n            \n                # Player one wins\n                if randVal <= playerOneWinPercent:\n                    df.score[playerOne - 1] += 1\n                # Draw\n                elif randVal <= playerOneWinPercent + drawPercent:\n                    df.score[playerOne - 1] += .5\n                    df.score[playerTwo - 1] += .5\n                # Player two wins\n                else:\n                    df.score[playerTwo - 1] += 1  \n            j += 1\n    \n    df.reset_index(inplace = True, drop = True)\n\n# Simulates the tournament n times and prints the results.\ndef Simulation(n , k):\n    i = 0\n    resultsdf = pd.DataFrame(data)\n    resultsdf['numFirst'] = 0\n    resultsdf['numSecond'] = 0\n    resultsdf['numThird'] = 0\n    resultsdf['numFourth'] = 0\n    \n    while i < n:\n        Tournament(k)\n        \n        # Sorts the results of the tournament\n        df.sort_values('score', ascending = False, inplace = True)\n       \n        # Records the results of the tournament\n        first = df.playerNumber[0]\n        second = df.playerNumber[1]\n        third = df.playerNumber[2]\n        fourth = df.playerNumber[3]\n        \n        resultsdf.numFirst[first - 1] += 1\n        resultsdf.numSecond[second - 1] += 1\n        resultsdf.numThird[third - 1] += 1\n        resultsdf.numFourth[fourth - 1] += 1\n\n        i += 1\n    \n    resultsdf['firstFreq'] = resultsdf['numFirst'] / n\n    resultsdf['secondFreq'] = resultsdf['numSecond'] / n\n    resultsdf['thirdFreq'] = resultsdf['numThird'] / n\n    resultsdf['fourthFreq'] = resultsdf['numFourth'] / n\n    \n    resultsdf.sort_values('numFirst', ascending = False, inplace = True)\n    resultsdf.reset_index(inplace = True, drop = True)\n    \n    print(resultsdf)\n    \nSimulation(1000, 2)")


# In[ ]:




